package pm;

public class Exam5 {
	public static void main(String[] args) {
		//객체의 타입 변환
		
		//기본 자료형에서 봤듯이 자바는 =을 사용하여 왼쪽과 오른쪽의 자료형이 일치해야한다.
		//만약 자료형이 다르면 자바가 자동으로 타입을 변환해 주거나 개발자가 명시적으로 타입을 변환해야 한다.
		//객체도 마찬가지로 타입변환이 일어난다.
		
		//객체에서는 자식클래스 -> 부모클래스 는 업캐스팅
		//		   부모클래스 -> 자식클래스 는 다운캐스팅
		//객체는 항상 업캐스팅은 할 수 있으므로 명시적으로 적어주지 않아도 자바가 대신해준다.
		//하지만 객체 명시적으로 적어줘도 다운캐스팅 자체가 안될 때가 있다.
		//잘못된 다운캐스팅을 수행하면 ClassCastException이 발행하고 프로그램이 종료된다.
		
		//사람	학생은 사람이다.(언제나 ok)		업캐스팅
		//학생	사람은 학생이다.(언제나는 아니다.)	다운캐스팅
		
		//사람 human1 = new 사람();
		//사람 human2 = new 학생();
		
		//사람() 생성자를 이용해 객체를 생성하고 사람 자료형에 대입했다.
		//학생() 생성자를 이용하여 객체를 생성하고 역시 사람 자료형에 대입했다.
		//둘다 사람 타입의 자료형이다. 하지만 내용 다른다.
		//첫번째 human1객체는 사람 클래스로 만들었기 때문에 사람의 공통된 속성과 기능들만 포함됨
		//그렇기 때문에 학생으로의 다운캐스팅은 불가능하다.
		
		//두번째 human2객체는 학생() 생성자로 객체를 생성했으므로 객체 내부에는 사람의 공통된 특성 뿐이 아니라
		//학생만의 속성과 기능들이 포함되어 있다. 따라서 human2도 사람 자료형으로 저장돼 있지만 학생으로 다운캐스팅이 가능
		
		/*
		 * class A {}
		 * class B extends A{}
		 * class C extends B{}
		 * 
		 * -----업캐스팅------
		 * B b1 = new B();
		 * A a1 = (A)b1;
		 * 
		 * C c2 = new c();
		 * B b2 = (B)c2;
		 * A a2 = (A)c2;
		 * 
		 * 업캐스팅은 (type)생략가능함 -> B b2 = c2;
		 * 
		 * 
		 * -----다운캐스팅------
		 * A a1 = new A();
		 * B b1 = (B)a1; //에러
		 * 
		 * A a2 = new B();
		 * B b2 = (B)a2; //가능
		 * C c2 = (C)a2; //에러
		 * 
		 * 
		 */
	}
}























